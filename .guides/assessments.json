[
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3985050060",
  "source": {
   "name": "reading question built-in objects",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<class>>> is the blueprint used to create object.\nAn <<<object>>> a version of a class used by programmers.\nAn object is said to be an <<<instance>>> of a class.\n<<<Instantiation>>> is when an object is created from a class.",
   "distractors": "",
   "guidance": "A class is the blueprint used to create object.\nAn object a version of a class used by programmers.\nAn object is said to be an instance of a class.\nInstantiation is when an object is created from a class.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Vocabulary"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes"
     }
    ],
    "files": [
     "code/introObjects/BuiltIn.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/BuiltIn.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define class, object, instance, and instantiation",
   "tokens": {
    "blank": [
     "class",
     "object",
     "instance",
     "Instantiation"
    ],
    "text": [
     "A ",
     0,
     " is the blueprint used to create object.\nAn ",
     0,
     " a version of a class used by programmers.\nAn object is said to be an ",
     0,
     " of a class.\n",
     0,
     " is when an object is created from a class."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2424555517",
  "source": {
   "name": "reading question user-define objects",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Pitcher {\n    double era;\n}\n```\n\nSelect the code snippet below that instantiates an object of type `Pitcher` and sets the `era` attribute to 2.93.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "6f82b656-dd40-4f8e-0ed3-54e569ec19dc",
     "correct": true,
     "answer": "Pitcher pedro = new Pitcher();\npedro.era = 2.93;"
    },
    {
     "_id": "ae1d8ae0-4f72-a2ed-bc01-072df372c465",
     "correct": false,
     "answer": "Pitcher pedro = Pitcher();\npedro.era = 2.93;"
    },
    {
     "_id": "d2cb4503-1c6c-a242-858c-21cf602a2902",
     "correct": false,
     "answer": "Pitcher pedro = new Pitcher();\nera = 2.93;"
    },
    {
     "_id": "7c6342b5-1b89-ddc0-89a0-a1fe468b5c3f",
     "correct": false,
     "answer": "pedro = new Pitcher();\npedro.era = 2.93;"
    }
   ],
   "guidance": "When instantiating an object, you start by giving the object a type. In this case, the type is `Pitcher`. Give the object a name followed by the assignment operator. Use the `new` keyword and the class name to create a new object of type `Pitcher`.\n\n```java\nPitcher pedro = new Pitcher();\n```\n\nTo access a class attribute, use dot notation. That means using the object's name (`pedro`) followed by a `.`, and the use the name of the attribute. Assign the value `2.93` to the attribute like you would a variable.\n\n```java\npedro.era = 2.93;\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "User-Defined Objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/UserDefined.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/UserDefined.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify how to instantiate an object and modify an attribute"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2364413442",
  "source": {
   "name": "the constructor reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich code snippet below would be the constructor for the `Dog` class?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "8f697b72-01f0-9016-b2ea-b9641ec53d5d",
     "correct": true,
     "answer": "`Dog()`"
    },
    {
     "_id": "561aa89c-be55-eb26-a2c5-10596bc16443",
     "correct": false,
     "answer": "`class Dog`"
    },
    {
     "_id": "e1b0f7f3-a211-6d68-4169-38d14fa72c84",
     "correct": false,
     "answer": "`dog()`"
    },
    {
     "_id": "60928bc6-45f7-e2cb-968b-20d8340f9274",
     "correct": false,
     "answer": "`constructor`"
    }
   ],
   "guidance": "In Java, the constructor uses the name of the class (capitalization must match) and a set of parentheses. Since the class is `Dog`, the constructor would be:\n\n```java\nDog()\n```\n\nThe constructor does not use the keyword `class`. In addition, the spelling of the constructor must match that of the class. Since the class starts with a `D`, so must the constructor.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Object Constructors"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Constructor.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Constructor.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the constructor"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3801306128",
  "source": {
   "name": "constructor and parameters reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following object instantiation:\n\n```java\nPerson p = new Person(18, \"Dallas\");\n```\n\nWhich code snippet below represents the constructor needed for this instantiation?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "f998fa0b-63a0-3e7d-57f2-f2af4d56b15e",
     "correct": true,
     "answer": "`Person(int age, String homeTown)`"
    },
    {
     "_id": "33db92a7-565b-07a6-0280-95e5e5a133e8",
     "correct": false,
     "answer": "`Person(age, homeTown)`"
    },
    {
     "_id": "54ea49a0-8f92-da37-e4d5-ebcdfd4f7c04",
     "correct": false,
     "answer": "`Person(String homeTown, int age)`"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nPerson(int age, String homeTown)\n```\n\nEach parameter for the constructor requires a type. In addition, the order of the parameters is important. Since the object instantiation had `18` before `\"Dallas\"`, the constructor must do the same.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Constructor and Parameters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/ConstructorParameters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/ConstructorParameters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the constructor based on object instatiation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-359646314",
  "source": {
   "name": "reading question class attributes",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<class>>> attribute is an attribute whose value is shared by all instances of a class.\nAn <<<object>>> attribute is an attribute whose value is independent of other instances of a class.",
   "distractors": "variable\nconstant",
   "guidance": "A class attribute is an attribute whose value is shared by all instances of a class.\nAn object attribute is an attribute whose value is independent of other instances of a class.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Class Attributes"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/ClassAttributes.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/ClassAttributes.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between a class attribute and an object attribute",
   "tokens": {
    "blank": [
     "class",
     "object"
    ],
    "text": [
     "A ",
     0,
     " attribute is an attribute whose value is shared by all instances of a class.\nAn ",
     0,
     " attribute is an attribute whose value is independent of other instances of a class."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2232783722",
  "source": {
   "name": "reading question shallow vs deep copy",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<deep>>> copy is when Java makes a copy of the object and its attributes.\nA <<<shallow>>> copy is when Java makes a copy of the object, but the attributes are shared.",
   "distractors": "small\nmedium\nfake",
   "guidance": "A deep copy is when Java makes a copy of the object and its attributes.\nA shallow copy is when Java makes a copy of the object, but the attributes are shared.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Shallow and Deep Copying"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Copies.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Copies.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between shallow and deep copies",
   "tokens": {
    "blank": [
     "deep",
     "shallow"
    ],
    "text": [
     "A ",
     0,
     " copy is when Java makes a copy of the object and its attributes.\nA ",
     0,
     " copy is when Java makes a copy of the object, but the attributes are shared."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2431160952",
  "source": {
   "name": "introduction to objects formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nDog fido = new Dog();\nfido.breed = \"poodle\";\n```\n\nRearrange the code blocks below to declare the `Dog` class that corresponds to the code above. **Note**, not all of the code blocks will be used.",
   "initial": "class Dog {\n  String breed;\n}\nString breed = &quot;poodle&quot;; #distractor\npublic Dog(String breed) { #distractor\nclass dog #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nclass Dog {\n  String breed;\n}\n```\n\n* In the given code, no arguments were passed to `Dog` when `fido` was instantiated. There should be no constructor.\n* The given code set the value for `breed`, so `breed` should not be given a default value when initialized.\n* In the given code, the `Dog` class uses a capital `D`, so should the class definition.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Declare a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT declare a class"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1338030279",
  "source": {
   "name": "introduction to objects formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nSelect **all** of the statements that are true about shallow and deep copies.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "7776806d-f482-fb51-e22a-5f17da2b1168",
     "correct": true,
     "answer": "You need to use the copy constructor to make a deep copy"
    },
    {
     "_id": "b0b7e9f9-e246-5fdf-3639-a111c948c8d3",
     "correct": true,
     "answer": "Shallow copies only copy the object but not the object attributes"
    },
    {
     "_id": "4c57c90c-c40c-e28a-bfa8-0a483a5f4ef6",
     "correct": true,
     "answer": "Deep copies make a copy of the object and the object attributes"
    },
    {
     "_id": "6fbcbda6-0a7f-f1ea-0be5-84c43dce2904",
     "correct": true,
     "answer": "Changing an attribute of one shallow copy will affect the attribute of the other shallow copy"
    }
   ],
   "guidance": "All of the statements are true. \n* The copy constructor is used to make a deep copy. \n* Shallow copies only make a copy of the object, but not of the attributes.\n* Deep copes make a copy of the object and the attributes.\n* Changing an attribute of one shallow copy will affect the attribute of the other shallow copy.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Shallow and Deep Copying"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between shallow and deep copies"
  }
 },
 {
  "type": "test",
  "taskId": "test-3286085930",
  "source": {
   "name": "introduction to objects coding exercise 1",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python .guides/secure/introObjects/exercise1_test.py",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 40,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass PracticeClass {\n  String date;\n}\n  \n//add class definitions above this line\n\npublic class Exercise1 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nCreate the class `PracticeClass`. Then create the object attribute `date` of type `String`. ",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Creating Classes"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class without a constructor"
  }
 },
 {
  "type": "test",
  "taskId": "test-1000868489",
  "source": {
   "name": "introduction to objects exercise 2",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Cat {\n  String breed;\n  String color;\n  String name;\n  \n  public Cat() {\n    breed = \"american shorthair\";\n    color = \"black\";\n    name = \"kiwi\";\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise2 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nCreate the class `Cat`, then instantiate the string variables, `breed`, `color`, and `name`. Then create the constructor, but do not pass any parameters to it. Finally, set the values of the object attributes to be `\"american shorthair\"`, `\"black\"`, and `\"kiwi\"` respectively.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Object Constructors"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with a constructor"
  }
 },
 {
  "type": "test",
  "taskId": "test-743280736",
  "source": {
   "name": "introduction to objects coding exercise 3",
   "showName": false,
   "instructions": "Submit your work when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":false,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Superhero {\n  String name;\n  String secretIdentity;\n  String[] powers;\n  \n  public Superhero(String n, String s, String[] p) {\n    name = n;\n    secretIdentity = s;\n    powers = p;\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise3 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n\n\n    //add code above this line\n  }\n}\n```\n\nStart by declaring the `Superhero` class. The constructor should include parameters that represent `name`, `secretIdentity`, and`powers`. Be sure to keep the parameters in this order; otherwise your code will not pass the automated tests. Set the value of each attribute to its matching parameter. ",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Object Constructors with parameters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with a constructor and parameters"
  }
 },
 {
  "type": "test",
  "taskId": "test-2663969036",
  "source": {
   "name": "introduction to objects coding exercise 4",
   "showName": false,
   "instructions": "Submit your work when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Observation {\n  String date;\n  double temperature;\n  double elevation;\n  int penguins;\n  double precipitation;\n  \n  public Observation(String d, double t, double e, int p) {\n    date = d;\n    temperature = t;\n    elevation = e;\n    penguins = p;\n    precipitation = 0;\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise4 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nDeclare the object attributes as instructed by the prompt. Create a constructor with parameters in the order of `date`, `temperature`, `elevation`, and `penguins`. The `precipitation` attribute has a default value, so it does not need to be a parameter of the constructor. Set the value of each attribute to the corresponding parameter. Finally, set the value of `precipitation` to `0`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Constructor"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with a construction, parameters, and a default value"
  }
 },
 {
  "type": "test",
  "taskId": "test-3142794422",
  "source": {
   "name": "introduction to objects coding exercise 5",
   "showName": false,
   "instructions": "Submit your work when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass BigCat {\n  String species;\n  String commonName;\n  String[] habitat;\n  static String genus = \"panthera\";\n  \n  public BigCat(String s, String c, String[] h) {\n    species = s;\n    commonName = c;\n    habitat = h;\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise5 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nCreate the `species`, `commonName` and `habitat` object attributes as instructed by the prompt. The `genus` attribute needs to be a class attribute. That is why the `static` keyword is used. Notice, `genus` is **not** all caps, so do not use the `final` keyword with this attribute. Finally, set the values of the object attributes with the constructor.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Class Attribute"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT declare a class attribute with the static keyword"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3387365333",
  "source": {
   "name": "introduction to objects lab 1",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at the `Car` class definition below. How many parameters are used when creating an instance of the `Car` class?\n\n```java\nclass Car {\n  String make;\n  String model;\n  int year;\n  String color;\n\n  Car(String ma, String mo, int y) {\n    make = ma;\n    model = mo;\n    year = y;\n    color = \"black\";\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "b053e919-b6f0-341c-c44a-569bfa6a2215",
     "correct": true,
     "answer": "3"
    },
    {
     "_id": "d04a4598-5772-9dc1-b5ad-f854ae16161a",
     "correct": false,
     "answer": "2"
    },
    {
     "_id": "0f7dad32-284f-c972-58ed-3b236633450f",
     "correct": false,
     "answer": "4"
    },
    {
     "_id": "d4147a78-2f3b-4f8d-aabc-3e937d989a50",
     "correct": false,
     "answer": "5"
    }
   ],
   "guidance": "While there are four object attributes, only three values (`ma`, `mo`, and `y`) are passed as parameters to the constructor. The `color` attribute gets a default value of `\"black\"`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Constructor"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java",
     "code/introObjects/LabIntro.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify parameters passed to the constructor"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-568683216",
  "source": {
   "name": "intro objects lab 2 question ",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat does \"instantiate an object\" mean?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "bd848a24-269a-3ed8-f921-748a8fb19613",
     "correct": true,
     "answer": "Instantiating an object means to create an object based on a class."
    },
    {
     "_id": "0a65779c-a6de-6a26-f65b-226cb61f1eb4",
     "correct": false,
     "answer": "Instantiating an object means to create a class."
    },
    {
     "_id": "b4cd6157-2325-878e-09df-3f886a8d5df8",
     "correct": false,
     "answer": "Instantiating an object means to declare a variable."
    },
    {
     "_id": "4fd07915-4642-b61f-7247-f20edac42adb",
     "correct": false,
     "answer": "Instantiating an object means to make a copy of another object."
    }
   ],
   "guidance": "Instantiating an object means to create an object based on a class. The class is the blueprint from which objects are made. The act of creating an object based on the class blueprint is called instantiation.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Class instantiation"
     },
     {
      "name": "Programming Language",
      "value": "C++, Python, Java, JavaScript"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/IntroSwing.java"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/IntroSwing.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define object instantiation"
  }
 },
 {
  "type": "test",
  "taskId": "test-3706534948",
  "source": {
   "name": "introduction to objects lab challenge",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible answer:\n\n```java\n//add class definitions below this line\n    \nclass Dog {\n  String name;\n  String breed;\n  \n  public Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n  \n  Dog(Dog d) {\n    name = d.name;\n    breed = d.breed;\n  }\n}\n  \n//add class definitions above this line\n\npublic class LabChallenge {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Dog dog1 = new Dog(\"Marceline\", \"German Shepherd\");\n    Dog dog2 = new Dog(dog1);\n    dog2.name = \"Cajun\";\n    dog2.breed = \"Belgian Malinois\";\n    \n    System.out.println(dog1.name + \" \" + dog1.breed);\n    System.out.println(dog2.name + \" \" + dog2.breed);\n    System.out.println(dog2 == dog1);\n\n    //add code above this line\n  }\n}\n```\n\nTo create a deep copy, you need to use a copy constructor. Create a constructor like before, but pass another `Dog` object as the only parameter. Set the object attributes to that of the parameter using dot notation.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Shallow and Deep Copying"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT make a deep copy of an object"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-808538143",
  "source": {
   "name": "objects lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nThe following lines of code were used in this lab. Which line of code instantiated a `JFrame` object?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "d038e4b8-f284-2afe-436d-7d225c4ec6ae",
     "correct": true,
     "answer": "`JFrame window = new JFrame(\"Photogram\");`"
    },
    {
     "_id": "fc173290-c6f5-1218-ba2b-46d9a0a349e8",
     "correct": false,
     "answer": "`window.setSize(800, 500);`"
    },
    {
     "_id": "83729b25-8673-3f96-8263-65e94e3deb31",
     "correct": false,
     "answer": "`window.setLayout(new FlowLayout(3));`"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nJFrame window = new JFrame(\"Photogram\");\n```\n\nJava uses the `new` keyword when instantiating objects.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Object Instantiation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify object instantiation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-144652727",
  "source": {
   "name": "intro objects lab question 4",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blank below with the correct word.",
   "showValues": true,
   "text": "The <<<static>>> keyword is used to denote a class attribute.",
   "distractors": "public\nnew\nprivate",
   "guidance": "The `static` keyword is used to indicate a class attribute.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Class variables"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the keyword used to create class variables",
   "tokens": {
    "blank": [
     "static"
    ],
    "text": [
     "The ",
     0,
     " keyword is used to denote a class attribute."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-761353538",
  "source": {
   "name": "intro objects lab 5 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat are instance variables?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "06c6f1fd-fadd-085a-75c8-7e452ec2dfb7",
     "correct": true,
     "answer": "Instance variables are variables created by the constructor. You can think of instance variables as the attributes of an object."
    },
    {
     "_id": "7a4808e7-819b-efb8-9cc2-93916cd0895f",
     "correct": false,
     "answer": "There is no such thing as an instance variables in Java."
    },
    {
     "_id": "bec2c405-c522-7b73-d914-1422918e05af",
     "correct": false,
     "answer": "Instance variable is another name for a global variable."
    },
    {
     "_id": "1d89a56d-074c-de6f-23f5-88d5c4cc1797",
     "correct": false,
     "answer": "Instance variables are variables created inside methods."
    }
   ],
   "guidance": "Instance variables are variables created by the constructor. You can think of instance variables as the attributes of an object. Instance variables often store the values passed to the constructor as parameters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance Variables"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define instance variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4222575896",
  "source": {
   "name": "mutability external methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nObjects are mutable. What does this mean?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "5de52342-d55b-32c0-7930-8c7175002354",
     "correct": true,
     "answer": "Mutability means that value of object attributes can be changed."
    },
    {
     "_id": "de0a1273-e849-208a-10fa-235fee14a41c",
     "correct": false,
     "answer": "Mutability means that the you can change the attribute name for the object."
    },
    {
     "_id": "ca6f90d3-24a2-94d3-7609-436623babdcc",
     "correct": false,
     "answer": "Mutability means that objects must remain the same at all times."
    },
    {
     "_id": "24222f67-82a4-45a7-ee00-db3fb4a00fab",
     "correct": false,
     "answer": "Mutability means that an object change one time only."
    }
   ],
   "guidance": "Object mutability is the concept that values of object attributes can be changed.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Mutability"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/ExternalMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/ExternalMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define mutability"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1812218729",
  "source": {
   "name": "mutability external methods formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog {\n  String name;\n  String breed;\n\n  Dog() {\n    name = \"fido\";\n    breed = \"golden retriever\";\n  }\n}\n```\nUse the code blocks below to create the function `changeBreed` that updates the breed attribute of the `Dog` object. **Note**, not all of the blocks will be used, and code blocks must be properly indented.",
   "initial": "public static void changeBreed(Dog dog, String newBreed) {\n  dog.breed = newBreed;\n}\nd.breed = newBreed;  #distractor\npublic static void changeBreed() {  #distractor\nbreed = newBreed;  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic static void changeBreed(Dog dog, String newBreed) {\n  dog.breed = newBreed;\n}\n```\n\nThe `changeBreed` method needs to parameters, the `Dog` object being modified and the new breed. That is why the code block `public static void changeBreed() {` is incorrect. The parameter `dog` represents the `Dog` object being modified. To access the `breed` attribute, you first need to reference `dog`. That is why the code blocks `d.breed = newBreed;` and `breed = newBreed;` are incorrect.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Changing Objects with External Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct an external method that modifies an object"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3808903184",
  "source": {
   "name": "mutability external methods formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nImagine there exists a `Player` class that represents a video game character. Fill in the blanks below to complete the method `levelUp`. The method should do the following things:\n* Increase the player's level by 1\n* Increase the player's health by 10\n* Increase the player's score by 100",
   "showValues": false,
   "text": "```java\npublic static void levelUp(Player p) {\n  p.<<<level>>> += 1;\n  <<<p>>>.health += 10;\n  <<<p.score>>> += 100;\n}\n```",
   "distractors": "",
   "guidance": "The correct answer is:\n\n```java\npublic static void levelUp(Player p) {\n  p.level += 1;\n  p.health += 10;\n  p.score += 100;\n}\n```\n\nUsing the first line of code, you see that `Player p` is the parameter passed to `levelUp`. Since the level increases by 1, the second blank is `level`. The third blank is `p` since the `health` attribute cannot be accessed without a reference to the `Player` object. The last blank is `p.score` since this is the attribute that increases by 100.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     },
     {
      "name": "Content",
      "value": "Changing Objects with External Methods"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use context clues to create an external method that modifies an object",
   "tokens": {
    "blank": [
     "level",
     "p",
     "p.score"
    ],
    "text": [
     "```java\npublic static void levelUp(Player p) {\n  p.",
     0,
     " += 1;\n  ",
     0,
     ".health += 10;\n  ",
     0,
     " += 100;\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-680032819",
  "source": {
   "name": "external methods vs class methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks with either **external method**, **instance method**, or **external methods and instance methods** so that the sentence is correct.",
   "showValues": true,
   "text": "An <<<instance method>>> is declared inside of a class.\nAn <<<external method>>> is declared outside of a class.\n<<<External methods and instance methods>>> can modify an object.",
   "distractors": "",
   "guidance": "The correct answers are:\n\nAn instance method is declared inside of a class.\nAn external method is declared outside of a class.\nExternal methods and instance methods can modify an object.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/mutability/Mutability.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/Mutability.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between external and instance methods",
   "tokens": {
    "blank": [
     "instance method",
     "external method",
     "External methods and instance methods"
    ],
    "text": [
     "An ",
     0,
     " is declared inside of a class.\nAn ",
     0,
     " is declared outside of a class.\n",
     0,
     " can modify an object."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2540601199",
  "source": {
   "name": "more class methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume you have the `Person` class as defined below:\n\n```java\nclass Person {\n  String name;\n  int age;\n\n  Person(String n, int a) {\n    name = n;\n    age = a;\n  }\n}\n```\n\nIn addition, `alice` is an instance of the `Person` class:\n\n```java\nPerson alice = Person(\"Alice\", 32);\n```\n\nUsing the code blocks below to create an instance method called `birthday` that adds a year to Alice's age. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "void birthday() {\n  age += 1;\n}\nint birthday() {  #distractor\nvoid birthday(int newAge) {  #distractor\nage = newAge;  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nvoid birthday() {\n  age += 1;\n}\n```\n\n* The instance method `birthday` should not be of type `int` as this method does not return an integer.\n* The instance method `birthday` does not need a parameter, as this method always increases the `age` attribute by 1.\n* The `age` attribute should be increased by 1, not by another integer passed to the `birthday` method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Instance Method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/MoreMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create an instance method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1589623942",
  "source": {
   "name": "printing the meal 1 reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the name of a method that is defined within a class?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "340c3867-b606-65cf-c728-b9cd4a9db25a",
     "correct": true,
     "answer": "Instance method"
    },
    {
     "_id": "ff7ce12d-773c-5388-b8b3-3a9daf81550f",
     "correct": false,
     "answer": "Method"
    },
    {
     "_id": "80681c11-773d-dcf1-1e67-a98b2c2f737c",
     "correct": false,
     "answer": "User-defined method"
    }
   ],
   "guidance": "An instance method is a method that is defined within a class. The name `method` is not correct because it does not distinguish if the method was declared inside or outside of a class. While instance methods can be a user-defined method, not all user-defined methods are instance methods. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/MoreMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate a instance method from other methods"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2239985009",
  "source": {
   "name": "printing the meal 2 reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the class `Author` is defined as follows:\n\n```java\nclass Author {\n  String name;\n  String book;\n  \n  Actor(String authorName, String famousBook) {\n    name = authorName;\n    book = famousBook;\n  }\n}\n```\n\nFill in the blanks below so that the instance method `printAuthor` is correct.",
   "showValues": true,
   "text": "```java\n<<<void>>> printAuthor() {\n  System.out.println(<<<name>>> + \" is known for their book \" + <<<book>>>);\n}\n```",
   "distractors": "String\nauthorName\nfamousBook",
   "guidance": "The correct answer is:\n\n```java\nvoid printAuthor() {\n  System.out.println(name + \" is known for their book \" + book);\n}\n```\n\n* `String` is not correct because the `printAuthor` does not have a return statement, so the return type must be `void`.\n* `authorName` and `famousBook` are not correct because those are the parameter names for the constructor, not the attribute names.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Instance methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/MoreMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create an instance method",
   "tokens": {
    "blank": [
     "void",
     "name",
     "book"
    ],
    "text": [
     "```java\n",
     0,
     " printAuthor() {\n  System.out.println(",
     0,
     " + \" is known for their book \" + ",
     0,
     ");\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1983956315",
  "source": {
   "name": "methods formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog: {\n  String name;\n  String breed;\n\n  Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n\n  void bark() {\n    System.out.println(\"Woof, woof!\");\n  }\n}\n\nDog myDog = new Dog(\"Brutus\", \"Pomeranian\");\n```\n\nWhat code would you add to print `Woof, woof!`?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "2e983084-185f-003e-299c-21aa1ffd93e7",
     "correct": true,
     "answer": "myDog.bark();"
    },
    {
     "_id": "fc15c228-9790-eb70-99ce-4d2b695b6484",
     "correct": false,
     "answer": "bark();"
    },
    {
     "_id": "63786543-a328-cb32-f540-353386a9088f",
     "correct": false,
     "answer": "myDog.bark(\"Brutus\", \"Pomeranian\");"
    },
    {
     "_id": "ba424d9d-fc68-9da7-3aab-26b4f6ab6bc7",
     "correct": false,
     "answer": "System.out.println(myDog.bark());"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nmyDog.bark();\n```\n\n* `bark();` is not correct because methods are called with dot notation. Dot notation requires the object name followed by the method name. This code snippet is missing the object name.\n* `myDog.bark(\"Brutus\", \"Pomeranian\");` is not correct because the `bark` method does not take any arguments.\n* `System.out.println(myDog.bark());` is not correct because the `bark` method does not return a value that can be printed.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate how to call an instance method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3809215804",
  "source": {
   "name": "methods formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nDrag the code blocks into the box below so that the instance method `hello` will print a greeting using the `name` attribute. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "void hello() {\n  System.out.println(&quot;Hello, &quot; + name);\n}\nString hello() {  #distractor\nvoid hello(String name) {  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nvoid hello() {\n  System.out.println(\"Hello, \" + name);\n}\n```\n\n* The `hello` method does not have a `return` statement, so the type is `void` not `String`.\n* `name` is an attribute, so `hello` does not need a parameter; it can already access the attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Instance methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create an Instance method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-571453302",
  "source": {
   "name": "static methods reading questoin",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat special keyword is required when creating a static method?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "cd46376b-2c9b-03d6-6713-55c0ff46100d",
     "correct": true,
     "answer": "`static`"
    },
    {
     "_id": "ff259ad8-5b8c-cff0-01a3-6479f5a44395",
     "correct": false,
     "answer": "`public`"
    },
    {
     "_id": "22b096ca-aca9-4f42-4540-668207cb1bfb",
     "correct": false,
     "answer": "`private`"
    },
    {
     "_id": "af80e280-0685-a79f-c9c8-4c0a00173e3b",
     "correct": false,
     "answer": "`void`"
    }
   ],
   "guidance": "The `static` keyword is used when creating static methods.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Static Keyword"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Static Methods"
     }
    ],
    "files": [
     "code/mutability/StaticMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/StaticMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recognize keyword needed to create static methods"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3303739284",
  "source": {
   "name": "independence from objects reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<static>>> method can be called without instantiating an object.\nAn <<<instance>>> method must instantiate an object before being called.",
   "distractors": "public\nprivate",
   "guidance": "The correct answers are:\n\nA **static** method can be called without instantiating an object.\nAn **instance** method must instantiate an object before being called.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/Independent.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/Independent.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between static and instance methods",
   "tokens": {
    "blank": [
     "static",
     "instance"
    ],
    "text": [
     "A ",
     0,
     " method can be called without instantiating an object.\nAn ",
     0,
     " method must instantiate an object before being called."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-643654737",
  "source": {
   "name": "mutability coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise1Tester.java\",\"className\":\"Exercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise1\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass CelestialBody {\n  String name;\n  double diameter;\n  long distance;\n  int moons;\n  \n  CelestialBody(String n, double diam, long dist, int m) {\n    name = n;\n    diameter = diam;\n    distance = dist;\n    moons = m;\n  }\n  \n  double comparedToEarth() {\n    double earth = 12765.3;\n    double relativeSize = diameter / earth;\n    return relativeSize;\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise1 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n\n    CelestialBody planet = new CelestialBody(\"Jupiter\", 142984, 778360000L, 79);\n    System.out.println(planet.comparedToEarth());\n\n    //add code above this line\n  }\n}\n```\n\n* Move the `comparedToEarth` method inside of the `CelestialBody` class.\n* Remove the `public` and `static` keywords from the method.\n* `comparedToEarth`does not need any parameters since it can directly access the `diameter` attribute.\n* Remove `planet` from `comparedToEarth`. The method no longer has the parameter `planet`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise1/Exercise1.java",
     "code/mutability/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise1/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT transform an external method to an instance method"
  }
 },
 {
  "type": "test",
  "taskId": "test-3842605",
  "source": {
   "name": "mutability coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise2\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass CelestialBody {\n  String name;\n  double diameter;\n  long distance;\n  int moons;\n  \n  CelestialBody(String n, double diam, long dist, int m) {\n    name = n;\n    diameter = diam;\n    distance = dist;\n    moons = m;\n  }\n  \n  static String closerToSun(CelestialBody b1, CelestialBody b2) {\n    if (b1.distance < b2.distance) {\n      return b1.name;\n    } else {\n      return b2.name;\n    }\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise2 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n    CelestialBody mercury = new CelestialBody(\"Mercury\", 4879.4, 57909000, 0);\n    CelestialBody venus = new CelestialBody(\"Venus\", 12103.6, 108160000, 0);\n    String closest = CelestialBody.closerToSun(mercury, venus);\n    System.out.println(closest);\n    \n    //add code above this line\n  }\n}\n```\n\n* Static methods require the use of the `static` method.\n* The `closerToSun` method takes two `CelestialBody` objects as parameters.\n* Find the smaller of the two `distance` attributes of the `CelestialBody` objects.\n* Return the `name` attribute of the object that is closest to the sun.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise2/Exercise2.java",
     "code/mutability/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise2/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a static method"
  }
 },
 {
  "type": "test",
  "taskId": "test-3144038960",
  "source": {
   "name": "mutability coding exercise 4",
   "showName": false,
   "instructions": "Submit your work for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise4\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nimport java.util.ArrayList;\n\n//add class definitions below this line\n\nclass Library {\n  ArrayList<String> available;\n  ArrayList<String> onLoan;\n  \n  Library() {\n    available = new ArrayList<String>();\n    onLoan = new ArrayList<String>();\n  }\n  \n  void addBooks(String[] books) {\n    for (String book : books) {\n      available.add(book);\n    }\n  }\n  \n  void borrowBook(String book) {\n    onLoan.add(book);\n    available.remove(book);\n  }\n  \n  void returnBook(String book) {\n    onLoan.remove(book);\n    available.add(book);\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise4 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n    Library myLibrary = new Library();\n    String[] books = {\"Four Seasons\", \"Say Nothing\", \"Milkman\", \"Harry Potter and the Order of the Phoenix\"};\n    myLibrary.addBooks(books);\n    myLibrary.borrowBook(\"Harry Potter and the Order of the Phoenix\");\n    myLibrary.borrowBook(\"Say Nothing\");\n    myLibrary.returnBook(\"Say Nothing\");\n    System.out.println(myLibrary.available);\n    System.out.println(myLibrary.onLoan);  \n\n    //add code above this line\n  }\n}\n```\n\n* The `addBooks` method should iterate over the list of books passed to the method. Each element of the list should be added to the ArrayList attribute `available`. \n* The `borrowBook` method removes the book from the `available` attribute and adds it to the `onLoan` attribute.\n* The `returnBook` method removes the book from the `onLoan` attribute and adds it to the `available` attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise4/Exercise4.java",
     "code/mutability/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise4/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to create instance methods"
  }
 },
 {
  "type": "test",
  "taskId": "test-2231923768",
  "source": {
   "name": "mutability coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise5\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "```java\n  void board(int p) {\n    passengers += p;\n    calculateFares(p);\n  }\n```\nThe `board` method takes an integer of the people boarding the train. This number is added to the `passengers` attribute. Because people pay for the subway when boarding, be sure to call the `calculateFares` method when people are boarding the subway. This will keep track of the total fares.\n\n```java\n  void calculateFares(int p) {\n    totalFares += p * fare;\n  }\n```\nThe `calculateFares` method takes an integer representing the people boarding the subway. Multiply this number by the `fare` attribute and add this to the `totalFares` attribute.\n\n```java\n  void disembark(int p) {\n    if (passengers - p < 0) {\n      passengers = 0;\n    } else {\n      passengers -= p;\n    }\n  }\n```\nThe `disembark` method takes an integer representing the number of people exiting the subway. Remember, there cannot be a negative number of people on board a subway. Check to make sure that the `passengers` attribute minus the number of people disembarking is less than 0. If so, set `passengers` to 0. If not, subtract the people leaving the subway from `passengers`.\n\n```java\n  static void changeFare(double newFare) {\n    fare = newFare;\n  }\n```\nThe `changeFare` method is a `static` method because this method only changes the value of the `static` attribute `fare`. This method takes a double that represents the new fare. This value is assigned to the `fare` attribute.\n\n```java\n  int getIndex(String element) {\n    for (int i = 0; i < stops.length; i++) {\n      if (element.equals(stops[i])) {\n        return i;\n      }\n    }\n    return -1;\n  }\n```\nThis coding exercise does not ask you to make the `getIndex` method. However, this helper method allows us to reuse code instead of writing it multiple times. This method is used for the `distance` and `advance` methods.\n\n```java\n  int distance(String destination) {\n    int currentIndex = getIndex(currentStop);\n    int destinationIndex = getIndex(destination);\n    return Math.abs(destinationIndex - currentIndex);\n  }\n```\nThe `distance` method takes a string that represents the subway stop to which you are going to calculate the distance. We will calculate the distance (number of stops away) by using the index (the attribute `stops` is an array) for the destination and the index of the subway's current stop. Use the helper method `getIndex` to get the index of `currentStop` and the index of `destination`. The difference between these two numbers is the distance. However, we do not want a negative number to represent the difference, so we use the absolute value method (`Math.abs`) to keep the distance positive.\n\n```java\n  void advance() {\n    if (direction.equals(\"south\")) {\n      if (currentStop.equals(\"Kendall\")) {\n        currentStop = \"Central\";\n        direction = \"north\";\n      } else {\n        int currentIndex = getIndex(currentStop);\n        currentStop = stops[currentIndex + 1];\n      }\n    } else if (direction.equals(\"north\")) {\n      if (currentStop.equals(\"Alewife\")) {\n        currentStop = \"Davis\";\n        direction = \"south\";\n      } else {\n        int currentIndex = getIndex(currentStop);\n        currentStop = stops[currentIndex - 1];\n      }\n    }\n  }\n```\nThe `advance` method is the most complex. There are four different scenarios to take into account:\n1) The subway is travelling South and is at the terminus (`\"Kendall\"`). For this scenario, the `currentStop` attribute becomes the previous stop (`\"Central\"`) and the `direction` attribute becomes `\"north\"`. \n1) The subway is traveling South but is not at the terminus. For this scenario, use the `getIndex` helper method to get the index of the subway's current stop. Then update `currentStop` to the next element in the `stops` attribute.\n1) The subway is travelling North and is at the terminus (`\"Alewife\"`). For this scenario, the `currentStop` attribute becomes the next stop (`\"Davis\"`) and the `direction` attribute becomes `\"south\"`.\n1) The subway is travelling North but is not at the terminus. For this scenario, use the `getIndex` helper method to get the index of the subway's current stop. Then update `currentStop` to the previous element in the `stops` attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Intance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise5/Exercise5.java",
     "code/mutability/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise5/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create several instance methods for a given class"
  }
 },
 {
  "type": "test",
  "taskId": "test-83966248",
  "source": {
   "name": "mutability lab challenge",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/labChallenge\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n  int totalAnimals() {\n    return bigCats + primates + reptiles + birds;\n  }\n```\nThe `totalAnimals` does not have any parameters, and it returns the sum of the `bigCats`, `primates`, `reptiles`, and `birds` attributes.\n\n```java\n  int totalMammals() {\n    return bigCats + primates;\n  }\n```\nThe `totalMammals` method does not have any parameters. Return only the sum of `bigCats` and `primates` attributes. The other animals are not mammals.\n\n```java\n  String mostAnimals() {\n    if (bigCats > primates && bigCats > reptiles && bigCats > birds) {\n      return \"big cats\";\n    } else if (primates > bigCats && primates > reptiles && primates > birds) {\n      return \"primates\";\n    } else if (reptiles > bigCats && reptiles > primates && reptiles > birds) {\n      return \"reptiles\";\n    } else if (birds > bigCats && birds > primates && birds > reptiles) {\n      return \"birds\";\n    } else {\n      return \"There are an equal amount of animals\";\n    }\n  }\n```\nThe `mostAnimals` method does not have any parameters. Use a series of compound conditionals to ask if each attribute is greater than the rest of the attributes. Return a string for the name of the attribute with the most animals.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create several instance methods for a class"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2028536607",
  "source": {
   "name": "mutability lab 1 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\nclass Coffee {\n  String country;\n  String region;\n\n  Country(String c, String r) {\n    country = c;\n    region = r;\n  }\n}\n```\n\nFill in the blanks below to complete the instance method `printCoffee`.",
   "showValues": false,
   "text": "```java\n<<<void>>> printCoffee() <<<{>>>\n  System.out.println(\"This coffee comes from \" + <<<country>>> + \".\");\n  System.out.println(\"It was harvested in the \" + <<<region>>> + \" region.\");\n}\n```",
   "distractors": "",
   "guidance": "The correct answer is:\n\n```java\nvoid printCoffee() {\n  System.out.println(\"This coffee comes from \" + country + \".\");\n  System.out.println(\"It was harvested in the \" + region + \" region.\");\n}\n```\n\nThis method does not have a `return` statement, so it needs to be of type `void`. Curly brackets are used to mark the beginning and end of the code in a method. The second print statement is `region` since the word \"region\" appears in the text. That means the first print statement uses `country`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/Drawing.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/Drawing.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct an instance method",
   "tokens": {
    "blank": [
     "void",
     "{",
     "country",
     "region"
    ],
    "text": [
     "```java\n",
     0,
     " printCoffee() ",
     0,
     "\n  System.out.println(\"This coffee comes from \" + ",
     0,
     " + \".\");\n  System.out.println(\"It was harvested in the \" + ",
     0,
     " + \" region.\");\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-2519445590",
  "source": {
   "name": "mutability coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise3\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass Mass {\n  double milligrams;\n  double grams;\n  double kilograms;\n  \n  Mass(int mg, int g, int kg) {\n    milligrams = mg;\n    grams = g;\n    kilograms = kg;\n  }\n  \n  double totalWeight() {\n    double tw = kilograms * 1000 + grams + milligrams / 1000;\n    return tw;\n  }\n  \n  static double combinedWeight(Mass m1, Mass m2) {\n    return m1.totalWeight() + m2.totalWeight();\n  }\n  \n  static String heavier(Mass m1, Mass m2) {\n    double mass1 = m1.totalWeight();\n    double mass2 = m2.totalWeight();\n    if (mass1 > mass2) {\n      return \"The first object is heavier\";\n    } else if (mass2 > mass1) {\n      return \"The second object is heavier\";\n    } else {\n      return \"The two objects weigh the same\";\n    }\n  }\n  \n  static double averageWeight(Mass m1, Mass m2) {\n    return combinedWeight(m1, m2) / 2;\n  }\n}\n \n//add class definitions above this line\n```\n\nThe `totalWeight` method is a helper method and needs direct access to the instance attributes of a `Mass` object. Static methods cannot directly access instance attributes, so `totalWeight` cannot be a static method. For all of the other methods, add the `static` keyword. Each method takes two `Mass` objects as parameters. Be sure that each static methods references both of these arguments (`m1` and `m2` in the example above) when calling the `totalWeight` method or calling the `combinedWeight` method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise3/Exercise3.java",
     "code/mutability/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise3/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to transform an instance method into a static method."
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-425645972",
  "source": {
   "name": "mutability lab 2 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume that the `TravelLog` class exists with the following constructor:\n\n```java\nclass TravelLog {\n  ArrayList<String> cities;\n\n  TravelLog() {\n    cities = new ArrayList<String>();\n  }\n}\n```\n\nCreate the instance method `addCity` by dragging the code blocks into the box below. The method should add the name of a city to the list of cities visited. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "void addCity(String city) {\n  cities.add(city);\n}\nstatic void addCity(String city) { #distractor\ncity.add(cities); #distractor\nvoid addCity(int city) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer:\n\n```java\nvoid addCity(String city) {\n  cities.add(city);\n}\n```\n\n* You are asked to make an instance method, not a static method. That is why `static void addCity(String city) {` is not correct.\n* `cities` is the ArrayList attribute, not `city`. That is why `city.add(cities);` is not correct.\n* The `addCity` method takes the name of a city as a parameter, which is a string. That is why `void addCity(int city) {` is not correct.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create an instance method"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4205667561",
  "source": {
   "name": "static methods formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code and determine which method is a static method and which one is an instance method.\n\n```java\nDog myDog = new Dog(\"spike\", \"pomeranian\");\nmyDog.sit();\nDog.bark();\n```\n\nFill in the blanks below.",
   "showValues": true,
   "text": "<<<sit()>>> is an instance method.\n<<<bark()>>> is a static method.",
   "distractors": "",
   "guidance": "The correct answer is:\n\n`sit()` is an instance method.\n`bark()` is a static method.\n\nOnly static method can be called from the class (`Dog.bark()`). Therefore, `sit()` must be an instance method",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify a static method",
   "tokens": {
    "blank": [
     "sit()",
     "bark()"
    ],
    "text": [
     0,
     " is an instance method.\n",
     0,
     " is a static method."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3234133400",
  "source": {
   "name": "static methods formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nWhy does the following code generate an error?\n\n```java\nclass SmartPhone {\n  String manufacturer;\n  String model;\n\n  SmartPhone(String ma, String mo) {\n    manufacturer = ma;\n    model = mo;\n  }\n\n  static void describe() {\n    System.out.println(manufacturer + \" \" + model);\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "99ffe7c1-b2c1-8714-5e66-ac4c1b0ea465",
     "correct": true,
     "answer": "Static methods are not allowed to directly access instance attributes."
    },
    {
     "_id": "4a8770d3-c578-eda9-3b2f-af089def806e",
     "correct": false,
     "answer": "The return type of the `describe` method should be `String`."
    },
    {
     "_id": "dafa4014-35e4-50c9-1946-cc8e8394f62d",
     "correct": false,
     "answer": "The constructor has too many parameters."
    },
    {
     "_id": "5ade9994-35d0-29f8-829e-e3010cc6920f",
     "correct": false,
     "answer": "There is nothing wrong with the code."
    }
   ],
   "guidance": "Static methods are not allowed to directly access instance attributes. Either the method needs to be an instance method (remove the `static` keyword), or you need to pass a `SmartPhone` object to `describe` and access the attributes via the argument.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize that static methods cannot directly access instance attributes"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2980161329",
  "source": {
   "name": "mutability lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat keyword is used when creating an instance method?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "ea35d9d9-0ea9-737b-87b3-aead748e81b7",
     "correct": true,
     "answer": "There is no keyword used when creating an instance method"
    },
    {
     "_id": "3f18c6d3-5c39-6b7e-6b0d-4ea70fa0fe4c",
     "correct": false,
     "answer": "Use the `static` keyword"
    },
    {
     "_id": "b24b30d5-661e-d92d-843d-eb3925c04ac0",
     "correct": false,
     "answer": "Use the `instance` keyword"
    },
    {
     "_id": "8d63a844-1c3b-c9e2-7f29-2227b67e3080",
     "correct": false,
     "answer": "Use the `method` keyword"
    }
   ],
   "guidance": "There is no keyword used when creating an instance method. A static method uses the `static` keyword, but there is no keyword to designate an instance method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the lack of keyword used to declare an instance method."
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2390758956",
  "source": {
   "name": "what is encapsulation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the **best** definition of encapsulation from the choices below.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "02b39ee9-e50d-4ec4-3a5a-078e78460ddd",
     "correct": true,
     "answer": "Encapsulation occurs when you group together related data and methods, and when you hide or restrict access to data."
    },
    {
     "_id": "88bdd045-0fb1-73d3-e6c3-96f58ccaac07",
     "correct": false,
     "answer": "Encapsulation occurs when you hide or restrict access to data."
    },
    {
     "_id": "18c367a0-1b3e-0d4f-7f8e-d23f430bff53",
     "correct": false,
     "answer": "Encapsulation occurs when you group together related data and methods."
    }
   ],
   "guidance": "There are two main ideas behind encapsulation: grouping together related data and restricting this data. Each idea on its own can be an example of encapsulation. However, the best definition is one that includes grouping the data and restricting the data.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Encapsulation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/Encapsulation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/Encapsulation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define encapsulation"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4197611854",
  "source": {
   "name": "public access modifier reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect **all** the parts of your program that should use the `public` access modifier.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "76f2659a-51ab-f40b-8d89-5ca554fa1fa1",
     "correct": true,
     "answer": "Constructor"
    },
    {
     "_id": "47af5564-447c-0e8f-f39e-83be8d7b9a1a",
     "correct": true,
     "answer": "Methods"
    },
    {
     "_id": "a0cb6385-695e-a993-a5c0-027278dcd4e2",
     "correct": false,
     "answer": "Attributes"
    }
   ],
   "guidance": "Constructors and methods should make use of the `public` access modifier. Not every method will be public, but encapsulation requires that some methods be public. As a general rule, all attributes should be private even though Java allows for public attributes.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Public Access Modifier"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/PublicKeyword.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/PublicKeyword.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify what parts of their program should be public."
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2739099056",
  "source": {
   "name": "private access modifier reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect **all** of the true statements.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "3c7aa379-cb96-edbd-5bf9-8d5d55ac3576",
     "correct": true,
     "answer": "All attributes should be private"
    },
    {
     "_id": "f83654f5-cb9f-17b4-8379-c3e3e622b352",
     "correct": true,
     "answer": "Some methods should be private while others public"
    },
    {
     "_id": "f90d9535-eab6-35f0-da4f-17126221876f",
     "correct": false,
     "answer": "It is impossible to access private attributes and methods"
    },
    {
     "_id": "911b1638-5baa-4428-3f7b-75eb3e05d63d",
     "correct": false,
     "answer": "Methods called by the user should be private"
    }
   ],
   "guidance": "## True Statements\n* The statement `All attributes should be private` is true because encapsulation dictates that access to attributes should be restricted.\n* The statement `Some methods should be private while others public` is true because encapsulation says to restrict access with private methods. However, if all methods are private then the user could not call them. Therefore you need a mix of private and public methods.\n\n## False Statements\n* The statement `It is impossible to access private attributes and methods` is false because public methods can invoke private attributes and methods.\n* The statement `Methods called by the user should be private` is false because methods called by the user need to be public.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Private Access Modifier"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/PrivateKeyword.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/PrivateKeyword.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize true statements about the private access modifier"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-44663644",
  "source": {
   "name": "black box reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich definition below is the **best** definition for code as a black box?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "81eeaa02-a024-c064-eae3-be19cb126586",
     "correct": true,
     "answer": "When users know how to interact with the code, but they do not understand the inner workings of the code."
    },
    {
     "_id": "5dbcb0d0-26f6-967e-94a2-882c3aa80d3f",
     "correct": false,
     "answer": "When users do not understand the inner workings of the code."
    },
    {
     "_id": "6f2fa3e0-977b-6d59-15ab-40c384325e91",
     "correct": false,
     "answer": "When the `private` access modifier is used."
    }
   ],
   "guidance": "The best definition is:\n\n> When users know how to interact with the code, but they do not understand the inner workings of the code.\n\nA key part of code as a black box is that users do not need to understand the inner workings of the code. However, users are expected to use black box code, so they need to understand how to interact with it. While the `private` keyword is used to hide code from the user, simply using `private` does not create a black box. A black box is the result of careful planning — hiding everything that should not be directly accessed while making certain methods public.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Black Box"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/BlackBox.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/BlackBox.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define black box code"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-892924295",
  "source": {
   "name": "encapsulation formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog {\n  private String name;\n  private String breed;\n\n  private Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n\n  private void bark() {\n    System.out.println(\"Woof! Woof!\");\n  }\n}\n```\n\nThe code does not make proper use of encapsulation. Why?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "ec1cdc6f-44be-ae79-3c09-6eecf7ff12e9",
     "correct": true,
     "answer": "Everything is private. There is no way to instantiate a `Dog` object or call the `bark` method."
    },
    {
     "_id": "637c8c57-d98c-329c-2ff0-38773dbd8fb4",
     "correct": false,
     "answer": "Trick question, there is nothing wrong with the code."
    },
    {
     "_id": "fc223f4b-6be2-184a-b5f5-13c2283ee6ee",
     "correct": false,
     "answer": "The instance attributes should be public."
    }
   ],
   "guidance": "The correct answer is:\n\n>Everything is private. There is no way to instantiate a `Dog` object or call the `bark` method.\n\nEncapsulation is the practice of hiding and exposing information to the user. As written, the `Dog` class cannot be instantiated because the constructor is private. Even if this were public, the user could not call the `bark` method. Encapsulation means using both the `public` and `private` access modifiers.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Encapsulation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify incorrect encapsulation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2607923838",
  "source": {
   "name": "encapsulation formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nEncapsulation requires the use of the `public` and `private` keywords. Fill in the blanks so that the proper access modifier(s) correspond to different parts of a program.",
   "showValues": true,
   "text": "The constructor should be <<<public>>>.\nInstance attributes should be <<<private>>>.\nMethods should be <<<public and private>>>.",
   "distractors": "",
   "guidance": "Here are the correct answers:\n\n* Constructors should be public. If not, you cannot instantiate an object.\n* The convention in Java is to always make instance attributes private.\n* Methods need to be both public and private. Only those methods need by the user should be public; the rest should be private.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify when the public and private access modifiers should be used",
   "tokens": {
    "blank": [
     "public",
     "private",
     "public and private"
    ],
    "text": [
     "The constructor should be ",
     0,
     ".\nInstance attributes should be ",
     0,
     ".\nMethods should be ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1957726401",
  "source": {
   "name": "getters reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Country {\n  private String name;\n  private String[] languages;\n\n  public Country(String n, String[] l) {\n    name = n;\n    languages = l;\n  }\n}\n```\n\nDrag the code blocks into the box below. Create the **best** getter method for the `language` attribute. **Hint**, not all of the blocks will be used.",
   "initial": "public String[] getLanguages() {\n  return languages;\n}\nprivate String[] getLanguages() { #distractor\npublic String[] returnLanguages() { #distractor\nSystem.out.println(languages); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic String[] getLanguages() {\n  return languages;\n}\n```\n\n* Getter methods are accessible to the user, so they need to have the `public` access modifier. \n* The convention in Java is to start a getter method with the word `get`. Java would not throw an error if the method is named `returnLanguages`, but best practices say to use `getLanguages`.\n* A getter method should do only one thing, return the value of an attribute. Printing should not be done by a getter method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Getter Methods "
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/Getters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/Getters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a getter method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3781411493",
  "source": {
   "name": "setters reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Country {\n  private String name;\n  private String[] languages;\n\n  public Country(String n, String[] l) {\n    name = n;\n    languages = l;\n  }\n}\n```\n\nDrag the code blocks into the box below. Create the **best** setter method for the `language` attribute. **Hint**, not all of the blocks will be used.",
   "initial": "public void setLanguages(String[] newLanguages) {\n  languages = newLanguages;\n}\npublic String[] setLanguages(String[] newLanguages) { #distractor\npublic void setLanguages() { #distractor\nprivate String[] setLanguages(String[] newLanguages) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic void setLanguages(String[] newLanguages) {\n  languages = newLanguages;\n}\n```\n\n* Setter methods do not return a value, so their type should be `void`.\n* Setter methods update an attribute to a new value, so they require a parameter that represents this new value.\n* Setter methods need to be public so they can be called by users of the class.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Setter Methods "
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/Setters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/Setters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a setter method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3712924918",
  "source": {
   "name": "data validation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect **all** of the true statements about data validation.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "db82b984-96d7-1415-a543-0d344286111a",
     "correct": true,
     "answer": "Data validation is done in a setter method"
    },
    {
     "_id": "77fe7c4b-7b22-480e-0295-976bef6aa05f",
     "correct": true,
     "answer": "Data validation is important because the Java compiler cannot find all errors"
    },
    {
     "_id": "5da35b23-1698-988f-191f-fb700a684788",
     "correct": false,
     "answer": "Data validation is done in a getter method"
    },
    {
     "_id": "69613594-c599-e147-dfdf-45199b9366bb",
     "correct": false,
     "answer": "Data validation is important because you want to make sure values of the wrong data type are not assigned to an attribute"
    }
   ],
   "guidance": "The true statements are:\n\n>Data validation is done in a setter method\nData validation is important because the Java compiler cannot find all errors\n\n* The job of a getter method is to return the value of an attribute. These methods should never update the value of an attribute, so data validation should not be done in a getter method.\n* The Java compiler will find some kinds of errors like incorrect data types. However, the compiler does not understand the context of the code. Data validation is the process of making sure a value is appropriate for its intended use.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/DataValidation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/DataValidation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify true statements about data validation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3069619256",
  "source": {
   "name": "getters and setters formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nFill in the blanks below.",
   "showValues": false,
   "text": "A <<<getter>>> accesses the value of a private instance variable.\nA <<<setter>>> mutates the value of a private instance variable.",
   "distractors": "",
   "guidance": "A **getter** accesses the value of a private instance variable.\nA **setter** mutates the value of a private instance variable.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Getters and Setters"
     },
     {
      "name": "Programming Language",
      "value": "C++, Python, Java, JavaScript"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define getters and setters",
   "tokens": {
    "blank": [
     "getter",
     "setter"
    ],
    "text": [
     "A ",
     0,
     " accesses the value of a private instance variable.\nA ",
     0,
     " mutates the value of a private instance variable."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-45499968",
  "source": {
   "name": "getters and setters formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the class `PrimaryColors` as defined below:\n\n```java\nclass PrimaryColor {\n  private String color = \"red\";\n\n  public String getColor() {\n    return color:\n  }\n}\n```\n\nDrag the code blocks into the box below to create a setter that validates if the new color is a primary color. **Hint**, not all of the code blocks will be used.",
   "initial": "public setColor(String newColor) {\n  String[] primaryColors = {&quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;};\n  for (String color : primaryColors) {\n    if (newColor.equals(color)) {\n      color = newColor;\n    }\n  }\n}\nnewColor = color; #distractor\npublic getColor(String newColor) { #distractor\nif (newColor == color) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic setColor(String newColor) {\n  String[] primaryColors = {\"red\", \"blue\", \"yellow\"};\n  for (String color : primaryColors) {\n    if (newColor.equals(color)) {\n      color = newColor;\n    }\n  }\n}\n```\n\n* Setter methods should start with `set` which is why `public getColor(String newColor) {` is incorrect.\n* String comparison is done with the `equals` method, which is why `if (newColor == color) {` is incorrect.\n* This method should update the `color` attribute, which is why `newColor = color;` is incorrect.\n",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct a setter with data validation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-333953468",
  "source": {
   "name": "encapsulation lab 1 question",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blanks below with the appropriate access modifier.",
   "showValues": true,
   "text": "The <<<private>>> access modifier means that an instance cannot directly access an attribute or method.\nThe <<<public>>> access modifier means that an instance can directly access an attribute or method.\nThe <<<default>>> access modifier is assumed when no modifier is used before an attribute or method.",
   "distractors": "",
   "guidance": "* The `private` access modifier means an instance cannot directly access an attribute or method. Instead, you have to use a public method (like a getter or a setter) to access private attributes or private methods.\n* The `public` access modifier means that an instance can directly access or modify the attribute or method.\n* If you do not use an access modifier, Java assumes the `default` access modifier, which is similar to `public`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define public, private, and default access modifiers",
   "tokens": {
    "blank": [
     "private",
     "public",
     "default"
    ],
    "text": [
     "The ",
     0,
     " access modifier means that an instance cannot directly access an attribute or method.\nThe ",
     0,
     " access modifier means that an instance can directly access an attribute or method.\nThe ",
     0,
     " access modifier is assumed when no modifier is used before an attribute or method."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3169021649",
  "source": {
   "name": "encapsulation lab 2 question",
   "showName": false,
   "instructions": "## Lab Question\n\nPredict the output of the following code:\n\n```java\nclass TestClass {\n  private String color;\n\n  public TestClass(String c) {\n    color = c;\n  }\n}\n\npublic class LabQuestion {\n  public static void main(String[] args) {\n    TestClass myObject = new TestClass(\"red\");\n    myObject.color = \"blue\";\n    System.out.println(myObject.color);\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a89395ba-aed3-f2c4-111e-6b76dbcdb2c0",
     "correct": true,
     "answer": "Error message, `color` is a private attribute."
    },
    {
     "_id": "0c132af5-3b7b-fa34-9727-db8277be9984",
     "correct": false,
     "answer": "`blue`"
    },
    {
     "_id": "941944d3-a64d-648c-7076-915228330db1",
     "correct": false,
     "answer": "`red`"
    }
   ],
   "guidance": "The `color` attribute is private which means an instance cannot access or modify it. Java would throw an error message.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Private Access Modifier"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT predict output from code"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3946797564",
  "source": {
   "name": "encapsulation lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\npublic void setAttribute(int newNumber) {\n  if (newNumber % 2 == 0) {\n    number = newNumber;\n  }\n}\n```\n\nSelect all of the true statements about the setter method above. **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "177ed6cf-e5b0-cdee-53a1-6839e7855b7b",
     "correct": true,
     "answer": "The setter method only works with integers"
    },
    {
     "_id": "e7d7aa41-da20-1191-5e59-c33548e78b20",
     "correct": true,
     "answer": "The setter method only works with even numbers"
    },
    {
     "_id": "29bac1db-af60-8b52-d88c-1641d7d5d8e5",
     "correct": false,
     "answer": "The setter method only works with doubles"
    },
    {
     "_id": "38adce83-62e2-3162-f750-e8d1b33b7f71",
     "correct": false,
     "answer": "The setter method only works with odd numbers"
    }
   ],
   "guidance": "The correct answers are:\n\n```\nThe setter method only works with integers\nThe setter method only works with even numbers\n```\n\nThe method header for `setAttribute` requires that an integer be passed to the method. It does not work with any other data type. The `%` operator is modulus which returns the remainder from `newNumber` and `2`. If the parameter is even (no remainder when divided by 2) then the `number` attribute will take a new value.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how data is being validated"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1447429733",
  "source": {
   "name": "encapsulation lab 4 question",
   "showName": true,
   "instructions": "## Lab Question\n\nWhat is the output of the following code?\n\n```java\nclass TestClass {\n  private String color;\n\n  public TestClass(String c) {\n    color = c;\n  }\n\n  public void returnColor() {\n    return color;\n  }\n\n  public String changeColor(String newColor) {\n    color = newColor();\n  }\n}\n\npublic class LabQuestion {\n  public static void main(String[] args) {\n    TestClass myObject = new TestClass(\"red\");\n    myObject.changeColor(\"blue\");\n    System.out.println(myObject.returnColor());\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "6aba3959-1363-14fa-066e-cb8054b491c4",
     "correct": true,
     "answer": "`blue`"
    },
    {
     "_id": "fbfe8913-81a2-1e1c-65ac-24391bb3aa4e",
     "correct": false,
     "answer": "`red`"
    },
    {
     "_id": "55592a79-f93d-f30f-1e93-49f0b5996051",
     "correct": false,
     "answer": "Error message, the getter and setter should be called `getColor` and `setColor`."
    }
   ],
   "guidance": "The code will print `blue`. The convention is to name the getter and setter `getColor` and `setColor`. However, Java will not throw an error message if this convention is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Getters and Setters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab4.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify naming conventions for getters and setters"
  }
 },
 {
  "type": "test",
  "taskId": "test-791041872",
  "source": {
   "name": "encapsulation lab challegne",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Person {\n  private String name;\n  private int age;\n  private String occupation;\n  \n  public Person(String n, int a, String o) {\n    name = n;\n    age = a;\n    occupation = o;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String newName) {\n    name = newName;\n  }\n  \n  public int getAge() {\n    return age;\n  }\n  \n  public void setAge(int newAge) {\n    age = newAge;\n  }\n  \n  public String getOccupation() {\n    return occupation;\n  }\n  \n  public void setOccupation(String newOccupation) {\n    occupation = newOccupation;\n  }\n}\n  \n//add class definitions above this line\n\npublic class EncapsulationLabChallenge {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Person myPerson = new Person(\"Citra Curie\", 16, \"student\");\n    \n    System.out.println(myPerson.getName());\n    myPerson.setName(\"Roman Faraday\");\n    System.out.println(myPerson.getName());\n    \n    System.out.println(myPerson.getAge());\n    myPerson.setAge(18);\n    System.out.println(myPerson.getAge());\n    \n    System.out.println(myPerson.getOccupation());\n    myPerson.setOccupation(\"plumber\");\n    System.out.println(myPerson.getOccupation());\n\n    //add code above this line\n  }\n}\n```\n\n* Be sure to use the `private` access modifier for the `name`, `age`, and `occupation` attributes.\n* Follow the naming conventions for the getters and setters in the **Expected Output** section.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters and Setters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/EncapsulationLabChallenge.java",
     "code/encapsulation/EncapsulationLabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/EncapsulationLabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT create a class that makes use of getters and setters"
  }
 },
 {
  "type": "test",
  "taskId": "test-3447362335",
  "source": {
   "name": "encapsulation coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise1Tester.java\",\"className\":\"CodingExercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass Fruit {\n  private String name;\n  private String color;\n  \n  public Fruit(String n, String c) {\n    name = n;\n    color = c;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String newName) {\n    name = newName;\n  }\n  \n  public String getColor() {\n    return color;\n  }\n  \n  public void setColor(String newColor) {\n    color = newColor;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise1 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Fruit myFruit = new Fruit(\"strawberry\", \"red\");\n    \n    System.out.println(myFruit.getName());\n    System.out.println(myFruit.getColor());\n    \n    myFruit.setName(\"tangerine\");\n    myFruit.setColor(\"orange\");\n    System.out.println(myFruit.getName());\n    System.out.println(myFruit.getColor());\n\n    //add code above this line\n  }\n}\n```\n* All attributes should be private\n* The constructor should be public\n* Create a getter and setter for each attribute so that you can access and change them",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters, Setters, and Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT convert a class with the default access modifier to a class with encapsulation"
  }
 },
 {
  "type": "test",
  "taskId": "test-3393708180",
  "source": {
   "name": "encapsulation coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise2Tester.java\",\"className\":\"CodingExercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Watch {\n  private String manufacturer;\n  private String model;\n  private int diameter;\n  private int waterResistance;\n  private String material;\n  \n  public Watch (String ma, String mo, int d, int wr, String mat) {\n    manufacturer = ma;\n    model = mo;\n    diameter = d;\n    waterResistance = wr;\n    material = mat;\n  }\n  \n  public String getManufacturer() {\n    return manufacturer;\n  }\n  \n  public void setManufacturer(String newManufacturer) {\n    manufacturer = newManufacturer;\n  }\n  \n  public String getModel() {\n    return model;\n  }\n  \n  public void setModel(String newModel) {\n    model = newModel;\n  }\n  \n  public int getDiameter() {\n    return diameter;\n  }\n  \n  public void setDiameter(int newDiameter) {\n    diameter = newDiameter;\n  }\n  \n  public int getWaterResistance() {\n    return waterResistance;\n  }\n  \n  public void setWaterResistance(int newWaterResistance) {\n    waterResistance = newWaterResistance;\n  }\n  \n  public String getMaterial() {\n    return material;\n  }\n  \n  public void setMaterial(String newMaterial) {\n    material = newMaterial;\n  }\n  \n  public String summary() {\n    String summary = \"\";\n    summary += \"Manufacturer: \" + capitalize(manufacturer) + \"\\n\";\n    summary += \"Model: \" + capitalize(model) + \"\\n\";\n    summary += \"Diameter: \" + diameter + \" mm\\n\";\n    summary += \"Water Resistance: \" + waterResistance + \" m\\n\";\n    summary += \"Material: \" + capitalize(material);\n    return summary;\n  }\n  \n  private String capitalize(String s) {\n    String capitalizedString = \"\";\n    capitalizedString += s.substring(0, 1).toUpperCase();\n    capitalizedString += s.substring(1);\n    return capitalizedString;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise2 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Watch myWatch = new Watch(\"omega\", \"speedmaster\", 42, 50, \"steel\");\n    System.out.println(myWatch.summary());\n\n    //add code above this line\n  }\n}\n```\n\n* All of the attributes should be private\n* Create getters and setters for each of the attributes\n* The summary method needs to return a multiline string. Start with an empty string and then concatenate each line to the string followed by a newline character. There should **not** be a newline character on the last line of the string.\n* The string attributes need to have an uppercase first letter. This task is done in its own private method. Pass in the lowercase string and return a string with the first letter capitalized. Start with an empty string. Use the `substring` to get the first character of the string (`substring(0, 1)`) and capitalize it. Concatenate this to the empty string. Then get the remainder of the string (`substring(1)`) and concatenate this to the string with the capital letter.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters, Setters, and a Public Method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with encapsulation, getters, setters, and a public method"
  }
 },
 {
  "type": "test",
  "taskId": "test-1440786407",
  "source": {
   "name": "encapsulation coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise3Tester.java\",\"className\":\"CodingExercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Song {\n  private String artist;\n  private String title;\n  private String album;\n  private int playCount;\n  private final double payRate;\n  private double moneyEarned;\n  \n  public Song(String ar, String t, String al, double p) {\n    artist = ar;\n    title = t;\n    album = al;\n    playCount = 0;\n    payRate = p;\n    moneyEarned = 0;\n  }\n  \n  public String getArtist() {\n    return artist;\n  }\n  \n  public void setArtist(String newArtist) {\n    artist = newArtist;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public void setTitle(String newTitle) {\n    title = newTitle;\n  }\n  \n  public String getAlbum() {\n    return album;\n  }\n  \n  public void setAlbum(String newAlbum) {\n    album = newAlbum;\n  }\n  \n  public int getPlayCount() {\n    return playCount;\n  }\n  \n  public void setPlayCount(int newPlayCount) {\n    playCount = newPlayCount;\n  }\n  \n  public double getMoneyEarned() {\n    return moneyEarned;\n  }\n  \n  public double getPayRate() {\n    return payRate;\n  }\n  \n  public void play() {\n    updatePlayCount();\n    updateMoneyEarned();\n  }\n  \n  private void updatePlayCount() {\n    playCount++;\n  }\n  \n  private void updateMoneyEarned() {\n    moneyEarned = playCount * payRate;\n  }\n  \n}\n  \n//add class definitions above this line\n\npublic class CodingExercise3 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Song mySong = new Song(\"led zeppelin\", \"ten years gone\", \"physical graffiti\", 0.001);\n    mySong.play();\n    System.out.println(mySong.getMoneyEarned());\n    for (int i = 0; i < 10000; i++) {\n      mySong.play();\n    }\n    System.out.println(mySong.getMoneyEarned());\n\n    //add code above this line\n  }\n}\n```\n\n* All of the attributes should be private\n* Because the `payRate` attribute is a constant, use the `final` keyword when declaring the attribute\n* The attributes `playCount` and `moneyEarned` should be set to 0 in the constructor\n* All of the attributes should have a getter method\n* All of the attributes **except for** `payRate` and `moneyEarned` should have a setter method\n* In this example, the `play` method calls two private helper methods, `updatePlayCount` and `updateMoneyEarned`\n* `updatePlayCount` increments the `playCount` method by 1\n* `updateMoneyEarned` updates `moneyEarned` to `payRate` multiplied by `playCount`",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters, Setters, and Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with encapsulation, specifically getters, setters, and access modifiers"
  }
 },
 {
  "type": "test",
  "taskId": "test-2521092329",
  "source": {
   "name": "encapsulation coding exercise 4",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise4Tester.java\",\"className\":\"CodingExercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Atm {\n  private double money;\n  \n  public Atm(double m) {\n    money = m;\n  }\n  \n  public double getMoney() {\n    return money;\n  }\n  \n  public void withdraw(double amount) {\n    if (haveEnoughMoney(amount)) {\n      if (positiveMoney(amount)) {\n         money -= amount;\n      } else {\n        System.out.println(\"You cannot withdraw a negative amount of money.\");\n      }\n    } else {\n      System.out.println(\"You do not have enough funds to withdraw that amount.\");\n    }\n  }\n  \n  public void deposit(double amount) {\n    if (positiveMoney(amount)) {\n      money += amount;\n    } else {\n      System.out.println(\"You cannot deposit a negative amount of money.\");\n    }\n  }\n  \n  private boolean haveEnoughMoney(double amount) {\n    return money > amount;\n  }\n  \n  private boolean positiveMoney(double amount) {\n    return amount >= 0;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise4 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Atm myAtm = new Atm(1000);\n    myAtm.deposit(50);\n    System.out.println(myAtm.getMoney());\n    myAtm.withdraw(925);\n    System.out.println(myAtm.getMoney());    \n\n    //add code above this line\n  }\n}\n```\n\n* The only attribute should be `money`\n* `money` has a getter method, but no setter\n* The `withdraw` method needs to test for two different conditions: the amount to be withdrawn is less than the money in the account, and the money to be withdrawn is positive\n* The private method `positiveMoney` asks if the amount of money is positive and returns a boolean value\n* The private method `haveEnoughMoney` asks if the amount of money to be withdrawn is greater than the money in the account and returns a boolean value\n* Data validation for the `deposit` method also uses the `positiveMoney` helper method",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to create a class with encapsulation and data validation"
  }
 },
 {
  "type": "test",
  "taskId": "test-336914172",
  "source": {
   "name": "encapsulation coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise5Tester.java\",\"className\":\"CodingExercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass SodaMachine {\n  private String[] sodas = {\"coke\", \"pepsi\", \"sprite\", \"dr. pepper\"};\n  private int cokeInventory;\n  private int pepsiInventory;\n  private int spriteInventory;\n  private int drPepperInventory;\n  private int money;\n    \n  public SodaMachine() {\n    cokeInventory = 20;\n    pepsiInventory = 20;\n    spriteInventory = 20;\n    drPepperInventory = 20;\n    money = 10;\n  }\n  \n  public String[] getSodas() {\n    return sodas;\n  }\n  \n  public void setSodas(int index, String newSoda) {\n    sodas[index] = newSoda;\n  }\n  \n  public int getCokeInventory() {\n    return cokeInventory;\n  }\n  \n  public void setCokeInventory(int newInventory){\n    cokeInventory = newInventory;\n  }\n  \n  public int getPepsiInventory() {\n    return pepsiInventory;\n  }\n  \n  public void setPepsiInventory(int newInventory){\n    pepsiInventory = newInventory;\n  }\n  \n  public int getSpriteInventory() {\n    return spriteInventory;\n  }\n  \n  public void setSpriteInventory(int newInventory){\n    spriteInventory = newInventory;\n  }\n  \n  public int getDrPepperInventory() {\n    return drPepperInventory;\n  }\n  \n  public void setDrPepperInventory(int newInventory){\n    drPepperInventory = newInventory;\n  }\n  \n  public int getMoney() {\n    return money;\n  }\n  \n  public void setMoney(int newMoney){\n    money = newMoney;\n  }\n  \n  public void buySoda(String soda, int amount) {\n    if (validSoda(soda) && enoughSoda(soda) && enoughMoney(amount)) {\n      updateInventory(soda);\n      updateMoney();\n    }\n  }\n  \n  private boolean validSoda(String soda) {\n    boolean correctSoda = false;\n    \n    for (String s : sodas) {\n      if (soda.equals(s)) {\n        correctSoda = true;\n      }\n    }\n    \n    if (correctSoda == false) {\n      System.out.println(\"That soda is not sold in this machine\");\n    }\n    return correctSoda;\n  }\n  \n  private boolean enoughMoney(int amount) {\n    if (amount >= 2) {\n      return true;\n    } else {\n      System.out.println(\"You did not insert enough money\");\n      return false;\n    }\n  }\n  \n  private boolean enoughSoda(String soda) {\n    if (soda.equals(\"coke\")) {\n      if (cokeInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Coke.\");\n        return false;\n      }\n    } else if (soda.equals(\"sprite\")) {\n      if (spriteInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Sprite.\");\n        return false;\n      }\n    } else if (soda.equals(\"pepsi\")) {\n      if (pepsiInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Pepsi.\");\n        return false;\n      }\n    } else if (soda.equals(\"dr. pepper\")) {\n      if (drPepperInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Dr. Pepper.\");\n        return false;\n      }\n    }\n    return false;\n  }\n  \n  private void updateInventory(String soda) {\n    if (soda.equals(\"coke\")) {\n      cokeInventory--;\n    } else if (soda.equals(\"sprite\")) {\n      spriteInventory--;\n    } else if (soda.equals(\"pepsi\")) {\n      pepsiInventory--;\n    } else if (soda.equals(\"dr. pepper\")) {\n      drPepperInventory--;\n    }\n  }\n  \n  private void updateMoney() {\n    money += 2;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise5 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    SodaMachine myMachine = new SodaMachine();\n    myMachine.buySoda(\"coke\", 4);\n    System.out.println(myMachine.getMoney());\n    System.out.println(myMachine.getCokeInventory());\n\n    //add code above this line\n  }\n}\n```\n\n* Make all attributes private.\n* The constructor does not have any parameters. The initial values were discussed in the list at the top of the page.\n* Create getters and setters for each attribute. These methods follow Java naming conventions. The setter for the `sodas` attribute requires an index and the name of a new soda. All other setters have one parameter.\n* The `buySoda` method is public. It takes the name of the soda to purchase (string) and the amount of money inserted into the machine (integer). In this example, there are five helper methods. Three are for data validation and two are used to update the `SodaMachine` object.\n* `validSoda` takes the name of a soda (string) and validates that this string is found in the `sodas` attribute.\n* `enoughSoda` takes the name of a soda (string) and validates that there is at least one said in the inventory.\n* `enoughMoney` takes the money inserted in the machine (integer) and validates that it is greater than or equal to the price of a soda ($2).\n* `updateInventory` takes the name of a soda (string) and reduces the inventory attribute for that soda by 1.\n* `updateMoney` has no parameters and increases the `money` attribute by 2 (the cost of a soda).",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with encapsulation and data validation"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2434922771",
  "source": {
   "name": "mutability lab 4 question",
   "showName": true,
   "instructions": "## Lab Question\n\nDrag the code blocks into the box below to create a static method called `addition`. This method accepts two integer parameters (`num1` and `num2`) and returns the sum of these two parameters. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "static int addition(int num1, int num2) {\n  return num1 + num2;\n}\nint static addition(int num1, int num2) { #distractor\nstatic int addition(double num1, int num2) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nstatic int addition(int num1, int num2) {\n  return num1 + num2;\n}\n```\n\n* The `static` keyword comes before the return type for the method, which is why `int static addition(int num1, int num2) {` is incorrect.\n* This method takes two integers as parameters, which is why `static int addition(double num1, int num2) {` is incorrect.\n",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a static method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2081032533",
  "source": {
   "name": "what is inheritance reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nUse the code below to help you answer the question.\n\n```java\nclass XYZ {\n\n}\n\nclass ABC extends XYZ {\n\n}\n```\n\nFrom the options below indicate which class is the superclass and which class is the subclass. **Note**, there are two answers for this problem.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "dff5ea80-0986-416b-8527-e70944d87755",
     "correct": true,
     "answer": "`ABC` is the subclass"
    },
    {
     "_id": "115ae69d-5a5d-3f2f-8113-4877eec8253c",
     "correct": true,
     "answer": "`XYZ` is the superclass"
    },
    {
     "_id": "aafa253c-2311-09a9-4dea-bd2c5b4a4afa",
     "correct": false,
     "answer": "`ABC` is the superclass"
    },
    {
     "_id": "471538a5-802c-56d5-5e24-73ce8e098205",
     "correct": false,
     "answer": "`XYZ` is the subclass"
    }
   ],
   "guidance": "The correct answers are:\n* `ABC` is the subclass\n* `XYZ` is the superclass\n\nBecause the definition of `ABC` contains `extends XYZ`, `ABC` is the subclass. That means `XYZ` must be the superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Superclass and Subclass"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/WhatIsInheritance.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/WhatIsInheritance.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT distinguish between the superclass and the subclass"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2940799859",
  "source": {
   "name": "super keyword reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat does the keyword `super` refer to?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "30f415ed-65d4-eef9-6529-648308b7f3ab",
     "correct": true,
     "answer": "The superclass"
    },
    {
     "_id": "674f7527-ce02-8aa5-63a2-938435fbff14",
     "correct": false,
     "answer": "The subclass"
    },
    {
     "_id": "4cecb445-23f7-95ab-eee1-619b27638fe4",
     "correct": false,
     "answer": "A newly instantiated object"
    }
   ],
   "guidance": "The keyword `super` refers to the superclass, which is sometimes called the parent class. For example, calling `super` in the constructor of the subclass will call the constructor of the superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Super Keyword"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Super.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Super.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify to what the super keyword refers"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1313898131",
  "source": {
   "name": "inheritance hierarchy reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhen does the `instanceof` operator return `true`? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a6123970-5bc7-8547-f1ac-605987edcbbc",
     "correct": true,
     "answer": "When the object is an instance of the same class."
    },
    {
     "_id": "186ae633-3985-468b-540b-14e307a6449c",
     "correct": true,
     "answer": "When the object is an instance of the subclass."
    },
    {
     "_id": "29a49127-eb0f-811c-2a68-14a2460067c4",
     "correct": false,
     "answer": "When the object is an instance of the superclass."
    },
    {
     "_id": "e3b704f4-cad6-4fcd-247b-a1554c674170",
     "correct": false,
     "answer": "Whenever inheritance is used."
    }
   ],
   "guidance": "The correct answers are:\n* `When the object is an instance of the same class.`\n* `When the object is an instance of the subclass.`\n\nThe `instanceof` operator compares an object and a class. If the object has the same type as the comparison class it returns `true`. It also returns `true` when the object is a subclass of the comparison class.\n\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Inheritance Hiearchy, Superclasses and Subclasses"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Hierarchy.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Hierarchy.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT test for inheritance hierarchy"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2353549155",
  "source": {
   "name": "superclass & subclass formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following class:\n\n```java\nclass Pet {\n  private String name;\n}\n```\n\nSelect the code that creates the `Dog` class that inherits from `Pet`.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "69268177-491b-44cb-927f-0a97bb4c03f9",
     "correct": true,
     "answer": "class Dog extends Pet {}"
    },
    {
     "_id": "077111a3-6b8a-b641-f1f8-4f303e215c4c",
     "correct": false,
     "answer": "class Dog inherits Pet {}"
    },
    {
     "_id": "fcdea550-a444-a47f-1cb5-55ecbe05caec",
     "correct": false,
     "answer": "class Dog(Pet) {}"
    },
    {
     "_id": "3e8ac4a3-db8d-98f9-651e-b580dc21fcb6",
     "correct": false,
     "answer": "class Dog extend Pet {}"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nclass Dog extends Pet {}\n```\n\nJava uses the `extends` keyword to indicate inheritance.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Create a Subclass"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Hierarchy.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Hierarchy.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a subclass"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-255782616",
  "source": {
   "name": "superclass & subclass formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog {\n  private String name;\n  private String breed;\n\n  public Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n}\n```\n\nRearrange the code blocks below to create the subclass `Pug` that calls the constructor from the superclass with arguments. **Hint**, not all code blocks will be used, and they must be properly indented.",
   "initial": "class Pug extends Dog {\n  public Pug(String n, String b) {\n    super(n, b);\n  }\n}\nDog(n, b); #distractor\nclass Pug inherits Dog { #distractor\npublic Pug() { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nclass Pug extends Dog {\n  public Pug(String n, String b) {\n    super(n, b);\n  }\n}\n```\n\nCreate a public constructor that has the same parameters as the superclass. Within the constructor, use the `super` keyword and pass it the parameters. Java will call the constructor from the superclass with the appropriate parameters.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Super Keyword"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT call the constructor from the superclass with arguments"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-678926361",
  "source": {
   "name": "extending a class reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Pet {\n  private String name;\n  private String age;\n\n  public Pet(String n, String a) {\n    name = n;\n    age = a;\n  }\n}\n```\n\nUsing the code blocks below, create the class `Dog` that inherits from `Pet`. In addition, extend the constructor to have the attribute `breed`.  **Hint**, not all of the code blocks will be used, and the code blocks must be properly indented.",
   "initial": "class Dog extends Pet {\n  private String breed;\n  public Dog(String n, String a, String b) {\n    super(n, a);\n    breed = b;\n  }\n}\nclass Pet extends Dog { #distractor\npublic Dog(String n, String a) { #distractor\nsuper(n, a, b); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the correct answer:\n\n```java\nclass Dog extends Pet {\n  private String breed;\n  public Dog(String n, String a, String b) {\n    super(n, a);\n    breed = b;\n  }\n}\n```\n\n* The `Dog` class extends the `Pet` class, not the other way around.\n* Declare the `breed` attribute.\n* The constructor for `Dog` needs all of the parameters of the `Pet` class plus the parameter for `breed`.\n* The `Pet` constructor only takes two arguments, so only pass it information for the `name` and `age` attributes.\n* Initialize the `breed` attribute in the `Dog` constructor.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Extend a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/ExtendClass.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/ExtendClass.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT extend the constructor of the superclass"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1159177153",
  "source": {
   "name": "method overriding reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the statements that are true for method overriding and extending a class. **Hint:** there is more than one correct answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "c7e83a29-2ed3-a1fa-9b9b-4b590a184c48",
     "correct": true,
     "answer": "Extending a class happens when new attributes or methods are added to the subclass that do not exist in the superclass."
    },
    {
     "_id": "a29a60c4-fa48-8862-ef5d-3dec648677ba",
     "correct": true,
     "answer": "Method overriding happens when the subclass has a method with the same name as the superclass, but the subclass' method does something different."
    },
    {
     "_id": "c544c606-b734-d987-7e1b-e116a16357b6",
     "correct": false,
     "answer": "Method overriding happens when new attributes or methods are added to the subclass that do not exist in the superclass."
    },
    {
     "_id": "39a81076-3aa7-4158-5d20-637561804d44",
     "correct": false,
     "answer": "Extending a class happens when the subclass has a method with the same name as the superclass, but the subclass' method does something different."
    }
   ],
   "guidance": "The correct answers are:\n\n* Method overriding happens when the subclass has a method with the same name as the superclass, but the subclass' method does something different.\n* Extending a class happens when new attributes or methods are added to the subclass that do not exist in the superclass.\n\nThe other two choices are incorrect because they have confused \"method overriding\" with the definition for \"extending a class\" and vice versa.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Extending & Overriding a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/OverrideMethod.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/OverrideMethod.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between extending a class and method overriding"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1932407461",
  "source": {
   "name": "Extending & Overriding Formative Assessment 1",
   "showName": false,
   "instructions": "Assume the following code:\n\n```java\nclass Car{\n  private String make;\n  private String model;\n  private String color;\n\n  public Car(String ma, String mo, String c) {\n    make = ma;\n    model = mo;\n    color = c;\n  }\n\n  public void getMake() {\n    return make;\n  }\n\n  public void getModel() {\n    return make;\n  }\n\n  public void getColor() {\n    return make;\n  }\n}\n```\n\nCreate the subclass `Sedan`. Extend this class by adding the `describe` method. This method prints the string `I am a red Toyota Camry.` \"Toyota\" is the make and \"Camry\" is the model. \n\nDrag the appropriate code blocks into the box below. **Hint:** not all of the code blocks will be used, and the code blocks must be properly indented.",
   "initial": "class Sedan extends Car {\n  public Sedan(String ma, String mo, String c) {\n    super(ma, mo, c);\n  }\n  public void describe() {\n    System.out.print(&quot;I am a &quot; + getColor() + &quot; &quot;);\n    System.out.println(getMake() + &quot; &quot; getModel() + &quot;.&quot;);\n  }\n}\nSystem.out.print(&quot;I am a &quot; + color + &quot; &quot;); #distractor\nSystem.out.println(make + &quot; &quot; model + &quot;.&quot;); #distractor\nclass Sedan { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the answer: \n\n```java\nclass Sedan extends Car {\n  public Sedan(String ma, String mo, String c) {\n    super(ma, mo, c);\n  }\n  public void describe() {\n    System.out.print(\"I am a \" + getColor() + \" \");\n    System.out.println(getMake() + \" \" getModel() + \".\");\n  }\n}\n```\n\n* The `Sedan` class should inherit from the `Car` class, so be sure to use the `extends` keyword.\n* The `Sedan` class needs to invoke a `Car` constructor to pass it three arguments. Use the `super` keyword for this.\n* The `make`, `model`, and `color` keywords are a part of the superclass, so you need to use the getter methods to access these values.\n\n",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Extending a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT extend the subclass with a new method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3124334261",
  "source": {
   "name": "extending & overriding formative assessment 2",
   "showName": false,
   "instructions": "Assume the following code:\n\n```java\nclass SportsCar extends Car{\n  private double acceleration;\n\n  public SportsCar(String self, String ma, String mo, String c, Double a) {\n    super(ma, mo, c);\n    acceleration = a;\n  }\n\n  public void acceleration(super) {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n}\n```\n\nThe `SportsCar` class inherits from the `Car` class and the `acceleration` method overrides a method from the superclass. What is wrong with the `acceleration` method?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "7d7819b5-886d-113b-6e44-7d8111da189a",
     "correct": true,
     "answer": "The method declaration should be:\n```java\n  public void acceleration() {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n```"
    },
    {
     "_id": "90bf200d-e249-6a35-5f3e-5fa16dfd5918",
     "correct": false,
     "answer": "The method declaration should be:\n```java\n  public void acceleration extends acceleration() {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n```"
    },
    {
     "_id": "3a81a2c4-b528-38f0-6e48-07df224072cf",
     "correct": false,
     "answer": "The method declaration should be:\n```java\n  public void acceleration() {\n    super.acceleration();\n  }\n```"
    },
    {
     "_id": "dcbc957c-2570-fa8c-a5bb-b6d262033802",
     "correct": false,
     "answer": "The method declaration should be:\n```java\n  public void acceleration() {\n    System.out.println(\"0 to 60 in \" + getAcceleration() + \" seconds!\");\n  }\n```"
    }
   ],
   "guidance": "You do not need to use any special key words to tell Java that the current method is overriding a method from the suerclass. Method declarations and method overriding look the same from the declaration point of view.\n\n```java\n  public void acceleration() {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Overridng a Method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT override a method from a superclass"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3981125571",
  "source": {
   "name": "overriding annotation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Train {\n  private int cars;\n\n  public Train() {\n    cars = 10;\n  }\n\n  public int getCars() {\n    return cars;\n  }\n\n  public void length() {\n    System.out.println(\"The train has \" + cars + \" cars.\");\n  }\n}\n```\n\nFill in the blanks to complete the `FreightTrain` method which extends the `Train` class and overrides the the `length` method.",
   "showValues": true,
   "text": "```\nclass <<<FreightTrain>>> extends <<<Train>>> {\n  <<<@Override>>>\n  public void <<<length>>>() {\n    System.out.println(\"The train has \" + <<<getCars()>>> + \" freight cars.\");\n  }\n}\n```",
   "distractors": "cars\nOverride\n@Extends",
   "guidance": "The correct answer is:\n\n```java\nclass FreightTrain extends Train {\n  @Override\n  public void length() {\n    System.out.println(\"The train has \" + getCars() + \" freight cars.\");\n  }\n}\n```\n\n* When using the `extends` keyword, the subclass (`FreightTrain`) comes before and the superclass (`Train`) comes after.\n* The correct annotation for override is `@Override`.\n* You are overriding the `length` method, so make sure it appears in the `FreightTrain` class.\n* The `cars` attribute is private to the superclass, so use `getCars` to access it.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Overriding Annotation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/OverridingAnnotation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/OverridingAnnotation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT annotate when overriding a method",
   "tokens": {
    "blank": [
     "FreightTrain",
     "Train",
     "@Override",
     "length",
     "getCars()"
    ],
    "text": [
     "```\nclass ",
     0,
     " extends ",
     0,
     " {\n  ",
     0,
     "\n  public void ",
     0,
     "() {\n    System.out.println(\"The train has \" + ",
     0,
     " + \" freight cars.\");\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1007431142",
  "source": {
   "name": "multiple inheritance reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhy does Java not allow for multiple inheritance where two or more superclasses are of different data types?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "9958e615-4d58-b510-a928-8c24252e6371",
     "correct": true,
     "answer": "This type of multiple inheritance leads to ambiguity."
    },
    {
     "_id": "fd738f95-76e8-cf26-9d83-4369e52e5ca4",
     "correct": false,
     "answer": "This type of multiple inheritance is impossible. No programming languages allow for this type of multiple inheritance."
    },
    {
     "_id": "08823efb-d564-26d5-4c4b-e1600354910c",
     "correct": false,
     "answer": "Trick question, this type of multiple inheritance is allowed."
    },
    {
     "_id": "0cc02e8a-aa68-942b-5f03-d3d440ac189a",
     "correct": false,
     "answer": "This type of multiple inheritance causes a syntax error."
    }
   ],
   "guidance": "Multiple inheritance where the superclasses have different data types leads to ambiguity. Imagine that each superclass has a method with the same name. Java cannot tell which method to invoke if the subclass calls this method. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Multiple Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/MultipleInheritance.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/MultipleInheritance.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain why multiple inheritance with superclasses of different types is not allowed"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2412811547",
  "source": {
   "name": "substitution principle reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "The substitution principle states that a substitution can be made if a <<<subclass>>> is used in place of its <<<superclass>>>.",
   "distractors": "class\nmethod\nobject",
   "guidance": "The substitution works when a subclass is used in place of its superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Subsitution Principle"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Substitution.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Substitution.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the substitution principle",
   "tokens": {
    "blank": [
     "subclass",
     "superclass"
    ],
    "text": [
     "The substitution principle states that a substitution can be made if a ",
     0,
     " is used in place of its ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-154590934",
  "source": {
   "name": "extending and overriding multilevel inheritance reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nUse the image below to help you fill in the blanks.\n\n![Reading Question](.guides/img/inheritance/multilevel_reading_question.png)",
   "showValues": true,
   "text": "<<<Code sample 1>>> is an example of extending a class.\n<<<Code sample 2>>> is an example of overriding a method.",
   "distractors": "",
   "guidance": "Extending a class is when a new method is added to the subclass that is not present in either superclass. Overriding a method is when the subclass has a method that shares a name with a method from a superclass, but the subclass method performs a different task.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/MultilevelExtendOverride.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/MultilevelExtendOverride.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between extending and overriding in multilevel inheritance",
   "tokens": {
    "blank": [
     "Code sample 1",
     "Code sample 2"
    ],
    "text": [
     0,
     " is an example of extending a class.\n",
     0,
     " is an example of overriding a method."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1778577812",
  "source": {
   "name": "multiple inheritance hierarchy reading question",
   "showName": false,
   "instructions": "Assume the following code:\n\n```java\nBravo b = new Bravo();\nDelta d = new Delta();\n\nb.display();\nd.display();\n```\n\nWhich produces the following output:\n\n```\nBravo\nAlpha\nDelta\nCharlie\nAlpha\n```\n\nUsing the above information, fill in the blanks for inheritance.",
   "showValues": true,
   "text": "```python\nclass Alpha() {\n  public void display() {\n    System.out.println(\"Alpha\");\n  }\n}\n\nclass Bravo() <<<extends Alpha>>> {\n  public void display() {\n    System.out.println(\"Bravo\");\n    super.display();\n  }\n}\n\nclass Charlie() <<<extends Alpha>>> {\n  public void display() {\n    System.out.println(\"Charlie\");\n    super.display();\n  }\n}\n\nclass Delta <<<extends Charlie>>> () {\n  public void display() {\n    System.out.println(\"Delta\");\n    super.display();\n  }\n}\n```",
   "distractors": "extends Bravo\nextends Delta",
   "guidance": "Here is the solution:\n\n```java\nclass Alpha() {\n  public void display() {\n    System.out.println(\"Alpha\");\n  }\n}\n\nclass Bravo() <<<extends Alpha>>> {\n  public void display() {\n    System.out.println(\"Bravo\");\n    super.display();\n  }\n}\n\nclass Charlie() <<<extends Alpha>>> {\n  public void display() {\n    System.out.println(\"Charlie\");\n    super.display();\n  }\n}\n\nclass Delta <<<extends Charlie>>> () {\n  public void display() {\n    System.out.println(\"Delta\");\n    super.display();\n  }\n}\n```\n\n* The `b` object runs the `display` method which prints `Bravo`. \n* The next line of output is `Alpha` which means `super` refers to class `Alpha`. Therefore, class `Bravo` extends class `Alpha`.\n* The `d` object runs the `display` method which prints `Delta`. However, there are two more lines of output. That means class `Delta` has multilevel inheritance.\n* The next line of output is `Charlie` which means `super` refers to class `Charlie`. Therefore, class `Delta` extends class `Charlie`.\n* Finally, calling `display` in class `Charlie` must also print `Alpha`. That means class `Charlie` extends class `Alpha`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/MultilevelHierarchy.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/MultilevelHierarchy.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT choose the proper inheritance scheme to match a given output",
   "tokens": {
    "blank": [
     "extends Alpha",
     "extends Alpha",
     "extends Charlie"
    ],
    "text": [
     "```python\nclass Alpha() {\n  public void display() {\n    System.out.println(\"Alpha\");\n  }\n}\n\nclass Bravo() ",
     0,
     " {\n  public void display() {\n    System.out.println(\"Bravo\");\n    super.display();\n  }\n}\n\nclass Charlie() ",
     0,
     " {\n  public void display() {\n    System.out.println(\"Charlie\");\n    super.display();\n  }\n}\n\nclass Delta ",
     0,
     " () {\n  public void display() {\n    System.out.println(\"Delta\");\n    super.display();\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 }
]